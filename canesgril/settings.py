"""
Django settings for canesgril project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import psycopg2
import cloudinary
import cloudinary.uploader
from cloudinary.utils import cloudinary_url
from dotenv import load_dotenv
from pathlib import Path

# Load environment variables from .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
#DEBUG=True
#ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = ['.railway.app', 'canesgril-production-6897.up.railway.app', 'localhost', '104.18.11.246', '127.0.0.1', '66.33.22.111']


# Application definition

INSTALLED_APPS = [
    'usuarios',
    'funcionario',
    'churras',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary',
    'cloudinary.forms',
    'cloudinary.models'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Adicione esta linha
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'canesgril.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'canesgril.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('dbname'),
        'USER': os.getenv('user'),
        'PASSWORD': os.getenv('password'),
        'HOST': os.getenv('host'),
        'PORT': os.getenv('port'),
        'OPTIONS': {
            'sslmode': 'require',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# A URL onde os arquivos estáticos serão acessíveis no navegador
STATIC_URL = '/static/'
# O diretório onde 'collectstatic' junta os arquivos estáticos na produção.
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Diretórios adicionais onde o Django vai procurar por arquivos estáticos
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Mantido, útil para estrutura de projeto.
# Whitenoise é a escolha ideal para Railway.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# --- Configurações para Cloudinary ---
#https://console.cloudinary.com/
CLOUDINARY_CLOUD_NAME = os.environ.get('CLOUDINARY_CLOUD_NAME')
CLOUDINARY_API_KEY = os.environ.get('CLOUDINARY_API_KEY')
CLOUDINARY_API_SECRET = os.environ.get('CLOUDINARY_API_SECRET')

# Define armazenamento padrão para uploads de mídia
DEFAULT_FILE_STORAGE = 'cloudinary.models.CloudinaryStorage' 


# Default primary key field type

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Força o uso de cookies CSRF apenas em conexões HTTPS
CSRF_COOKIE_SECURE = True

# Força o uso de cookies de sessão apenas em conexões HTTPS
SESSION_COOKIE_SECURE = True

# Adicione o domínio base do Railway e qualquer domínio personalizado
CSRF_TRUSTED_ORIGINS = [
    'https://*.railway.app',             # Para cobrir seu domínio Railway padrão
    'canesgril-production-6897.up.railway.app',
]
